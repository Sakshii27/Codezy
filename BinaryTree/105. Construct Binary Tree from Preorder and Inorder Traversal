class Solution {
public:

    int preindex =0;

    TreeNode* solve(vector<int> &preorder, vector<int> &inorder, int instart, int inend){
        if(instart > inend) return NULL;
        TreeNode* node = new TreeNode(preorder[preindex]);
        preindex++;

        int posIndex;
        for(int i=instart; i<=inend; i++){
            if(inorder[i] == node->val){
                posIndex = i;
                break;
            }
        }

        node->left = solve(preorder,inorder,instart,posIndex-1);
        node->right = solve(preorder,inorder,posIndex+1,inend);

        return node;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {        
        return solve(preorder,inorder,0,inorder.size()-1);
        
    }
};
 
 
 Most Optimized Solution
 
 class Solution {
public:
    TreeNode* build(vector<int>& preorder,int preStart,int preEnd,vector<int>& inorder,int inStart, int inEnd,unordered_map<int,int>&mp){
        if(preStart>preEnd || inStart>inEnd){
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[preStart]);
        int rootIndex = mp[root->val];
        int numsLeft = rootIndex-inStart;   
        root->left = build(preorder,preStart+1,preStart+numsLeft,inorder,inStart,rootIndex-1,mp);
        root->right=build(preorder,preStart+numsLeft+1,preEnd,inorder,rootIndex+1,inEnd,mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int>mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        TreeNode* root = build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,mp);
        return root;
    }
};
