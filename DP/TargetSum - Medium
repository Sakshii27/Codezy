
//  Variation of 0/1 knapsack Problem


class Solution {
public:

    int countsubsetsum(vector<int>& nums,int s1,int n){


    int t[n + 1][s1 + 1];
    for(int i=0; i< n+1; i++ ){
        for (int j = 0; j < s1 + 1; j++) {
        if(i==0){
            t[i][j] = 0;
        }
        if(j==0){
            t[i][j] = 1;
        }
    }
    }
    

    for (int i = 1; i < n + 1; i++) {
        for (int j = 0; j < s1 + 1; j++) {
            if (nums[i - 1] <= j) {
                t[i][j] = t[i - 1][j] + t[i - 1][j - nums[i - 1]];
            } else {
                t[i][j] = t[i - 1][j];
            }
        }
    }
    return t[n][s1];
}

    int findTargetSumWays(vector<int>& nums, int target) {
        
        target=abs(target);
        int n = nums.size();
        int sum=0;
        for(int i =0; i<nums.size(); i++){
            sum = sum + nums[i];
        }
        int s1=(sum+target)/2;
        if(sum<target||(sum+target)%2!=0)
            return 0;
        
         return countsubsetsum(nums, s1, n );
    }
};

