class disjoint_set{
    
    public:
    vector<int> rank, parent, size;
    disjoint_set(int n) {
        rank.resize(n, 0); // for 0 based  
        size.resize(n, 1);
        for(int i=0;i<n;i++) parent.push_back(i);
    }
        
    int findParent(int node) { // for Finding the ultimate parent
        if(parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]); // path Compression
    }
    
    void union_by_rank(int u, int v){
        int pu = findParent(u);
        int pv = findParent(v);
        if(rank[pu] < rank[pv]){
            parent[pu] = pv;
        }
        else if(rank[pu] > rank[pv]){
            parent[pv] = pu;
        }
        else{
            parent[pv] = pu;
                rank[pu] ++;
        }
    }
        
    void union_by_size(int u, int v) { // conneting nodes ig
    // find ultimate  parent of u and v
        int pu = findParent(u); // ultimate parent of u
        int pv = findParent(v); // ultimate parent of v
        
        if(size[pu] < size[pv]) {
            parent[pu] = pv; 
            size[pv] += size[pu];
        } 
        else {
            parent[pv] = pu;
            size[pu] += size[pv];
        }
    }
        
};
class Solution {
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        disjoint_set ds(V);
        
        
        
        for(int i=0; i<V; i++){
            for(int j=0; j<V; j++){
                if(adj[i][j] == 1) ds.union_by_rank(i,j);
            }
        }
        int count =0;
        for(int i=0; i<V; i++){
            if(ds.parent[i] == i) count++;
        }
        return count;
    }
};
