int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        // Code here
        
        vector<pair<int,int>> adj[n];
        for(auto it : flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        
        vector<int> dist(n,1e9);
        dist[src] =0;
        queue<pair<int,pair<int,int>>> q; 
        // {stop,node,cost}
        q.push({0,{src,0}});
        
        while(!q.empty()){
            int stop = q.front().first;
            int node = q.front().second.first;
            int cost = q.front().second.second;
            q.pop();
            
            if(stop > K) continue;
            
            for(auto it: adj[node]){
                int adjNode = it.first;
                int weight = it.second;
                
                if(weight + cost < dist[adjNode] && stop <=K){
                    dist[adjNode] = weight + cost;
                    q.push({stop + 1, {adjNode, dist[adjNode]}});
                }
            }
        }
        
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
